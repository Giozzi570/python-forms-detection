function PermiCamera() {
    selectCellphoneCamera()
    async function CameraFunction() {
      try {
      const stream = await navigator.mediaDevices.getUserMedia({
        video: { facingMode: "environment" },
        audio: false,
      });
      if (videoRef.current) {
        videoRef.current.srcObject = stream;
        setHiddenCellphone(false)
        setHiddenCellphoneError(true)
      }
    } catch (err) {
        let message = "";
      switch (err.name) {
        case "NotAllowedError":
          message = "Permiso denegado para usar la cámara.";
          break;
        case "NotFoundError":
          message = "No se encontró ninguna cámara.";
          break;
        case "NotReadableError":
          message = "La cámara está siendo usada por otra aplicación.";
          break;
        case "OverconstrainedError":
          message = "La configuración de video no es compatible con tu dispositivo.";
          break;
        case "SecurityError":
          message = "Debe ejecutarse en un sitio seguro (https o localhost).";
          break;
        default:
          message = "Error desconocido al acceder a la cámara.";
      }
      setErrorMsg(message);
      setHiddenCellphoneError(false)
      setHiddenLoad(true)
    }
    }
    CameraFunction()
    PermiCameraModal()
  }


async function guardarDatosEnBackendWithCellphone() {
  const datos = {
        name : localStorage.getItem('name'),
        id : localStorage.getItem('playerIdCounter'),
        TypeCamera : "Cellphone",
        TypeGame : localStorage.getItem('TypeGame'),
        data_image: localStorage.getItem('data_text_image')
        
  };
    console.log(`Estos son los ${datos}`);
    try{
        setHiddenLoad(!hiddenLoad)
        const response = await fetch("https://backend-v2-9f7y.onrender.com/guardar", 
          {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
        },
        body: JSON.stringify(datos),  // Envía el objeto completo
    })
    if (!response.ok) throw new Error("❌ Falló el guardado");
    else {}
      setHiddenLoad(true)
      setDetecFinish(!hiddenDetecActive)
    } catch (error){
        localStorage.setItem("error",error)
        setHiddenLoad(true)
        setHiddenError(!HideErrorActive)
        console.log(error)
    }

}
function CapturarImagen() {
      if (!videoRef.current) return;
  
      const canvas = document.createElement("canvas");
      const video = videoRef.current;
  
      // tamaño del canvas igual al del video
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;
  
      const ctx = canvas.getContext("2d");
      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
  
      // obtiene el string base64
      const dataUrl = canvas.toDataURL("image/webp");
      const data_url_python = dataUrl.split(",")[1]
      localStorage.setItem("data_text_image",data_url_python)
      console.log("Imagen en base64:", data_url_python); // podés usarla o enviarla a un backend
      setHiddenCellphone(!cellphone)
    }
  function PermiCameraModal(){
    setHiddenCamera(!camera)
}

function PermiCameraModalWeb(){
  setHiddenCamera(!camera)
  setHiddenFinishWeb(!hiddenfinishWeb)
  selectWebCamera()
}